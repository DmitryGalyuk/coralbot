{
	"name": "ExcelReportUploadToDB",
	"properties": {
		"activities": [
			{
				"name": "Parquet2DB",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Excel2Parquet",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ParquetSource",
						"additionalColumns": [
							{
								"name": "DateAdded",
								"value": {
									"value": "@utcNow()",
									"type": "Expression"
								}
							},
							{
								"name": "File_Name",
								"value": {
									"value": "@variables('file_name')",
									"type": "Expression"
								}
							}
						],
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"wildcardFileName": {
								"value": "@concat(variables('file_name'), '.parquet')",
								"type": "Expression"
							},
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "ParquetReadSettings"
						}
					},
					"sink": {
						"type": "SqlServerSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": true
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "gen",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "gen",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "Id",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "Id",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "Name",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "Name",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "ParentId",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "ParentId",
									"type": "Int32",
									"physicalType": "int"
								}
							},
							{
								"source": {
									"name": "Rank",
									"type": "String",
									"physicalType": "UTF8"
								},
								"sink": {
									"name": "Rank",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "Pending",
									"type": "Double",
									"physicalType": "DOUBLE"
								},
								"sink": {
									"name": "Pending",
									"type": "Double",
									"physicalType": "float"
								}
							},
							{
								"source": {
									"name": "Personal",
									"type": "Double",
									"physicalType": "DOUBLE"
								},
								"sink": {
									"name": "Personal",
									"type": "Double",
									"physicalType": "float"
								}
							},
							{
								"source": {
									"name": "Overall",
									"type": "Double",
									"physicalType": "DOUBLE"
								},
								"sink": {
									"name": "Overall",
									"type": "Double",
									"physicalType": "float"
								}
							},
							{
								"source": {
									"name": "GroupVolume",
									"type": "Double",
									"physicalType": "DOUBLE"
								},
								"sink": {
									"name": "GroupVolume",
									"type": "Double",
									"physicalType": "float"
								}
							},
							{
								"source": {
									"name": "File_Name",
									"type": "String"
								},
								"sink": {
									"name": "File_Name",
									"type": "String",
									"physicalType": "nvarchar"
								}
							},
							{
								"source": {
									"name": "DateAdded",
									"type": "String"
								},
								"sink": {
									"name": "DateAdded",
									"type": "DateTime",
									"physicalType": "date"
								}
							},
							{
								"source": {
									"name": "rownum",
									"type": "Int64",
									"physicalType": "INT64"
								},
								"sink": {
									"name": "rownum",
									"type": "Int32",
									"physicalType": "int"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "InputParquetReports",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "coral_dailystats",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Excel2Parquet",
				"type": "AzureFunctionActivity",
				"dependsOn": [
					{
						"activity": "Fetch from coral-club",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "file_name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "processExcel",
					"body": {
						"value": "@concat('{\"file_name\": \"', variables('file_name'), '\"}')",
						"type": "Expression"
					},
					"method": "POST"
				},
				"linkedServiceName": {
					"referenceName": "coral_function",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Fetch from coral-club",
				"type": "AzureFunctionActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"functionName": "dailyFetch",
					"method": "GET"
				},
				"linkedServiceName": {
					"referenceName": "coral_function",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "file_name",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "file_name",
					"value": {
						"value": "@concat(formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd'), '.xlsx')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Regenerate the structure",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Parquet2DB",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "coral_SqlServer",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "delete from structure;\n\nWITH \n    LatestDate (d) as (\n        SELECT max(DateAdded)\n        from CoralView\n    ),\n    ParentPathCTE (Id, ParentId, Name, ParentPath) AS (\n        SELECT Id, ParentId, Name, CAST(Name AS NVARCHAR(MAX)) AS ParentPath\n        FROM CoralView\n        WHERE ParentId = -1\n            and DateAdded = (select d from LatestDate)\n        UNION ALL\n        SELECT c.Id, c.ParentId, c.Name, p.ParentPath + ' - ' + c.Name\n        FROM CoralView c\n        INNER JOIN ParentPathCTE p ON c.ParentId = p.Id\n            and DateAdded = (select d from LatestDate)\n    )\n\ninsert into structure\nSELECT Id, Name, ParentPath\nFROM ParentPathCTE;\n"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"variables": {
			"file_name": {
				"type": "String"
			}
		},
		"annotations": [],
		"lastPublishTime": "2024-05-23T16:21:51Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}